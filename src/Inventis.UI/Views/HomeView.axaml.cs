using Avalonia.Controls;
using Avalonia.Input;
using Inventis.UI.ViewModels;

namespace Inventis.UI.Views;

/// <summary>
/// Class that initializes the 'Login' view component.
/// </summary>
internal sealed partial class HomeView : UserControl
{
	/// <summary>
	/// Constructor for the LoginView class.
	/// Initializes the components of the Login view.
	/// </summary>
	public HomeView()
	{
		InitializeComponent();
		KeyDownEvent.AddClassHandler<TopLevel>(OnGlobalKeyDown, handledEventsToo: true);
	}

	/// <summary>
	/// Global Key Down handler.
	/// If user puts data through keyboard and no TextInput is focused it should fall back into SearchTextBox
	/// Also handles keyboard shortcuts for additional functions when only main window is open
	/// </summary>
	/// <param name="topLevel">Base class for top level widgets</param>
	/// <param name="keyEventArgs">Event args for event generated by pressing keyboard button</param>
	private void OnGlobalKeyDown(TopLevel topLevel, KeyEventArgs keyEventArgs)
	{
		UserControl_KeyDown(topLevel, keyEventArgs);
	}

	private string _scanBuffer = "";
	private DateTime _lastKeystroke = DateTime.MinValue;
	private const int ScanTimeoutMs = 50;

	private void UserControl_KeyDown(object sender, Avalonia.Input.KeyEventArgs e)
	{
		var now = DateTime.UtcNow;

		if ((now - _lastKeystroke).TotalMilliseconds > ScanTimeoutMs)
		{
			_scanBuffer = "";
		}

		_lastKeystroke = now;

		string? keyChar = KeyToDigit(e.Key);
		if (!string.IsNullOrEmpty(keyChar))
		{
			_scanBuffer += keyChar;
		}

		if (e.Key == Avalonia.Input.Key.Enter && _scanBuffer.Length > 0)
		{
			ProcessScan(_scanBuffer).ConfigureAwait(false);
			_scanBuffer = "";
		}
	}

	private static string? KeyToDigit(Avalonia.Input.Key key)
	{
		if (key >= Avalonia.Input.Key.D0 && key <= Avalonia.Input.Key.D9)
			return ((char)('0' + (key - Avalonia.Input.Key.D0))).ToString();

		if (key >= Avalonia.Input.Key.NumPad0 && key <= Avalonia.Input.Key.NumPad9)
			return ((char)('0' + (key - Avalonia.Input.Key.NumPad0))).ToString();

		return null;
	}

	private async Task ProcessScan(string code)
	{
		if (DataContext is HomeViewModel vm)
		{
			await vm.ProcessScan(code, CancellationToken.None);
		}
	}
}
