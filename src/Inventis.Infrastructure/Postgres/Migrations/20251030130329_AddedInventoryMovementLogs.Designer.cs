// <auto-generated />
using System;
using Inventis.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Inventis.Infrastructure.Postgres.Migrations
{
    [DbContext(typeof(InventisDbContext))]
    [Migration("20251030130329_AddedInventoryMovementLogs")]
    partial class AddedInventoryMovementLogs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("inventis")
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Inventis.Domain.DailyInventoryReports.DailyInventoryReport", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DailyInventoryReports", "inventis");
                });

            modelBuilder.Entity("Inventis.Domain.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Users", "inventis");
                });

            modelBuilder.Entity("Inventis.Domain.Inventories.Inventory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("Type");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Inventories", "inventis");
                });

            modelBuilder.Entity("Inventis.Domain.Products.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("CurrentQuantityInBackroom")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CurrentQuantityInStore")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CurrentQuantityInWarehouse")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("EanCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("GrossPurchasePrice")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<decimal>("GrossSalePrice")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("NetPurchasePrice")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<decimal>("NetSalePrice")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<string>("ProviderContactDetails")
                        .HasColumnType("text");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("PurchasePriceVatRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<decimal>("SalePriceVatRate")
                        .HasColumnType("numeric");

                    b.Property<decimal>("StoredQuantityInBackroom")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("StoredQuantityInStore")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("StoredQuantityInWarehouse")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("TotalPurchaseGrossValue")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<decimal>("TotalSaleGrossValue")
                        .HasPrecision(16, 2)
                        .HasColumnType("numeric(16,2)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Products", "inventis");
                });

            modelBuilder.Entity("Inventis.Domain.Products.ProductInventoryMovementLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("CurrentQuantityInBackroomAfter")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("CurrentQuantityInBackroomBefore")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("CurrentQuantityInStoreAfter")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("CurrentQuantityInStoreBefore")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("CurrentQuantityInWarehouseAfter")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("CurrentQuantityInWarehouseBefore")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<string>("ScanId")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<decimal>("StoredQuantityInBackroomAfter")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("StoredQuantityInBackroomBefore")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("StoredQuantityInStoreAfter")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("StoredQuantityInStoreBefore")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("StoredQuantityInWarehouseAfter")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("StoredQuantityInWarehouseBefore")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("InventoryMovementLogs", "inventis");
                });

            modelBuilder.Entity("Inventis.Domain.DailyInventoryReports.DailyInventoryReport", b =>
                {
                    b.OwnsMany("Inventis.Domain.DailyInventoryReports.DailyInventoryScan", "DailyScans", b1 =>
                        {
                            b1.Property<string>("Id")
                                .HasMaxLength(26)
                                .HasColumnType("character varying(26)");

                            b1.Property<string>("DailyInventoryReportId")
                                .IsRequired()
                                .HasColumnType("character varying(26)");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean");

                            b1.Property<string>("Note")
                                .HasMaxLength(250)
                                .HasColumnType("character varying(250)");

                            b1.Property<string>("ProductId")
                                .IsRequired()
                                .HasMaxLength(26)
                                .HasColumnType("character varying(26)");

                            b1.Property<DateTime>("ScanTime")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<uint>("Version")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("xid")
                                .HasColumnName("xmin");

                            b1.HasKey("Id");

                            b1.HasIndex("DailyInventoryReportId");

                            b1.ToTable("DailyInventoryScans", "inventis");

                            b1.WithOwner()
                                .HasForeignKey("DailyInventoryReportId");
                        });

                    b.Navigation("DailyScans");
                });

            modelBuilder.Entity("Inventis.Domain.Inventories.Inventory", b =>
                {
                    b.OwnsMany("Inventis.Domain.Inventories.InventoryItem", "Items", b1 =>
                        {
                            b1.Property<string>("Id")
                                .HasMaxLength(26)
                                .HasColumnType("character varying(26)");

                            b1.Property<decimal>("ExpectedQuantity")
                                .HasPrecision(8, 2)
                                .HasColumnType("numeric(8,2)");

                            b1.Property<string>("InventoryId")
                                .IsRequired()
                                .HasColumnType("character varying(26)");

                            b1.Property<string>("ProductId")
                                .IsRequired()
                                .HasMaxLength(26)
                                .HasColumnType("character varying(26)");

                            b1.Property<string>("ProductName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<decimal>("Quantity")
                                .HasPrecision(8, 2)
                                .HasColumnType("numeric(8,2)");

                            b1.Property<uint>("Version")
                                .IsConcurrencyToken()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("xid")
                                .HasColumnName("xmin");

                            b1.HasKey("Id");

                            b1.HasIndex("InventoryId");

                            b1.ToTable("InventoryItems", "inventis");

                            b1.WithOwner()
                                .HasForeignKey("InventoryId");
                        });

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Inventis.Domain.Products.ProductInventoryMovementLog", b =>
                {
                    b.HasOne("Inventis.Domain.Products.Product", "Product")
                        .WithMany("InventoryMovementLogs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Inventis.Domain.Products.Product", b =>
                {
                    b.Navigation("InventoryMovementLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
